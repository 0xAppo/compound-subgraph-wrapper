# TODO: look to incorporate testing? https://github.com/peter-evans/docker-compose-actions-workflow

# Name our workflow
name: build-and-deploy-harvester

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build and push the stack to docker hub, and then update our DO droplet with the new stack
  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Push our Production image to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Builds our Production image from the yaml file we define
      - name: Build image
        run: docker compose -f docker-compose.yaml build

      # Tags our Production image with the username and latest tag (can change this) for Docker Hub
      - name: Tag image
        run: docker tag lodestar-subgraph-wrapper lodestardev/lodestar-subgraph-wrapper:latest
        
      # Pushes containers to Docker Hub so that we can pull it afterwards
      - name: Push image
        run: docker push lodestardev/lodestar-subgraph-wrapper:latest
        
      # Tells our Droplet:
        # power down existing containers (otherwise we conflict)
        # purge all existing images and containers
        # pull the most recent image from docker hub
        # run the most recent image and scale it up to 3 containers
      - name: Update Stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SUBGRAPH_SSH_HOST }}
          username: ${{ secrets.SUBGRAPH_SSH_USERNAME }}
          password: ${{ secrets.SUBGRAPH_SSH_PASSWORD }}
          port: ${{ secrets.SUBGRAPH_SSH_PORT }}
          script: |
            cd 
